digraph callgraph {
"bool jpge::jpeg_encoder::init(jpge::output_stream*, int, int, int, const jpge::params&)" -> "bool jpge::params::check() const" [style=solid];
"bool jpge::jpeg_encoder::init(jpge::output_stream*, int, int, int, const jpge::params&)" -> "void jpge::jpeg_encoder::deinit()" [style=solid];
"bool jpge::jpeg_encoder::init(jpge::output_stream*, int, int, int, const jpge::params&)" -> "bool jpge::jpeg_encoder::jpg_open(int, int, int)" [style=solid];
"virtual jpge::cfile_stream::~cfile_stream()" -> "bool jpge::cfile_stream::close()" [style=solid];
"jpge::memory_stream::memory_stream(void*, jpge::uint)" -> "jpge::output_stream::output_stream()" [style=solid];
"void jpge::jpeg_encoder::optimize_huffman_table(int, int)" -> "jpge::sym_freq* jpge::radix_sort_syms(jpge::uint, jpge::sym_freq*, jpge::sym_freq*)" [style=solid];
"void jpge::jpeg_encoder::optimize_huffman_table(int, int)" -> "void jpge::clear_obj(T&) [with T = int [33]]" [style=solid];
"void jpge::jpeg_encoder::optimize_huffman_table(int, int)" -> "void jpge::calculate_minimum_redundancy(jpge::sym_freq*, int)" [style=solid];
"void jpge::jpeg_encoder::optimize_huffman_table(int, int)" -> "void jpge::huffman_enforce_max_code_size(int*, int, int)" [style=solid];
"void jpge::jpeg_encoder::optimize_huffman_table(int, int)" -> "void jpge::clear_obj(T&) [with T = jpge::uint8 [17]]" [style=solid];
"bool jpge::jpeg_encoder::second_pass_init()" -> "void jpge::jpeg_encoder::first_pass_init()" [style=solid];
"bool jpge::jpeg_encoder::second_pass_init()" -> "void jpge::jpeg_encoder::emit_markers()" [style=solid];
"bool jpge::jpeg_encoder::second_pass_init()" -> "void jpge::jpeg_encoder::compute_huffman_table(jpge::uint*, jpge::uint8*, jpge::uint8*, jpge::uint8*)" [style=solid];
"void jpge::RGB_to_YCC(jpge::uint8*, const jpge::uint8*, int)" -> "jpge::uint8 jpge::clamp(int)" [style=solid];
"jpge::jpeg_encoder::~jpeg_encoder()" -> "void jpge::jpeg_encoder::deinit()" [style=solid];
"bool jpge::cfile_stream::open(const char*)" -> "bool jpge::cfile_stream::close()" [style=solid];
"void jpge::jpeg_encoder::emit_word(jpge::uint)" -> "void jpge::jpeg_encoder::emit_byte(jpge::uint8)" [style=solid];
"void jpge::jpeg_encoder::emit_marker(int)" -> "void jpge::jpeg_encoder::emit_byte(jpge::uint8)" [style=solid];
"void jpge::RGBA_to_YCC(jpge::uint8*, const jpge::uint8*, int)" -> "jpge::uint8 jpge::clamp(int)" [style=solid];
"bool jpge::jpeg_encoder::terminate_pass_two()" -> "void jpge::jpeg_encoder::put_bits(jpge::uint, jpge::uint)" [style=solid];
"bool jpge::jpeg_encoder::terminate_pass_two()" -> "void jpge::jpeg_encoder::flush_output_buffer()" [style=solid];
"bool jpge::jpeg_encoder::terminate_pass_two()" -> "void jpge::jpeg_encoder::emit_marker(int)" [style=solid];
"bool jpge::jpeg_encoder::jpg_open(int, int, int)" -> "void jpge::jpeg_encoder::compute_quant_table(jpge::int32*, jpge::int16*)" [style=solid];
"bool jpge::jpeg_encoder::jpg_open(int, int, int)" -> "void* jpge::jpge_malloc(size_t)" [style=solid];
"bool jpge::jpeg_encoder::jpg_open(int, int, int)" -> "void jpge::clear_obj(T&) [with T = jpge::uint32 [4][256]]" [style=solid];
"bool jpge::jpeg_encoder::jpg_open(int, int, int)" -> "bool jpge::jpeg_encoder::second_pass_init()" [style=solid];
"bool jpge::jpeg_encoder::jpg_open(int, int, int)" -> "void jpge::jpeg_encoder::first_pass_init()" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "bool jpge::jpeg_encoder::init(jpge::output_stream*, int, int, int, const jpge::params&)" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "virtual jpge::cfile_stream::~cfile_stream()" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "void jpge::jpeg_encoder::deinit()" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::jpeg_encoder::~jpeg_encoder()" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::jpeg_encoder::jpeg_encoder()" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::cfile_stream::cfile_stream()" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "bool jpge::cfile_stream::close()" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::uint jpge::jpeg_encoder::get_total_passes() const" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "bool jpge::cfile_stream::open(const char*)" [style=solid];
"bool jpge::compress_image_to_jpeg_file(const char*, int, int, int, const jpge::uint8*, const jpge::params&)" -> "bool jpge::jpeg_encoder::process_scanline(const void*)" [style=solid];
"void jpge::jpeg_encoder::deinit()" -> "void jpge::jpge_free(void*)" [style=solid];
"void jpge::jpeg_encoder::deinit()" -> "void jpge::jpeg_encoder::clear()" [style=solid];
"bool jpge::jpeg_encoder::terminate_pass_one()" -> "void jpge::jpeg_encoder::optimize_huffman_table(int, int)" [style=solid];
"bool jpge::jpeg_encoder::terminate_pass_one()" -> "bool jpge::jpeg_encoder::second_pass_init()" [style=solid];
"jpge::jpeg_encoder::jpeg_encoder()" -> "jpge::params::params()" [style=solid];
"jpge::jpeg_encoder::jpeg_encoder()" -> "void jpge::jpeg_encoder::clear()" [style=solid];
"jpge::jpeg_encoder::jpeg_encoder()" -> "jpge::params::params()" [style=solid];
"jpge::jpeg_encoder::jpeg_encoder()" -> "void jpge::jpeg_encoder::clear()" [style=solid];
"void jpge::jpeg_encoder::emit_byte(jpge::uint8)" -> "bool jpge::output_stream::put_obj(const T&) [with T = jpge::uint8]" [style=solid];
"bool jpge::jpeg_encoder::process_end_of_image()" -> "void jpge::jpeg_encoder::process_mcu_row()" [style=solid];
"bool jpge::jpeg_encoder::process_end_of_image()" -> "bool jpge::jpeg_encoder::terminate_pass_one()" [style=solid];
"bool jpge::jpeg_encoder::process_end_of_image()" -> "bool jpge::jpeg_encoder::terminate_pass_two()" [style=solid];
"jpge::sym_freq* jpge::radix_sort_syms(jpge::uint, jpge::sym_freq*, jpge::sym_freq*)" -> "void jpge::clear_obj(T&) [with T = jpge::uint32 [1024]]" [style=solid];
"void jpge::jpeg_encoder::code_block(int)" -> "void jpge::jpeg_encoder::code_coefficients_pass_two(int)" [style=solid];
"void jpge::jpeg_encoder::code_block(int)" -> "void jpge::jpeg_encoder::load_quantized_coefficients(int)" [style=solid];
"void jpge::jpeg_encoder::code_block(int)" -> "void jpge::jpeg_encoder::code_coefficients_pass_one(int)" [style=solid];
"void jpge::jpeg_encoder::code_block(int)" -> "void jpge::DCT2D(jpge::int32*)" [style=solid];
"bool jpge::jpeg_encoder::process_scanline(const void*)" -> "bool jpge::jpeg_encoder::process_end_of_image()" [style=solid];
"bool jpge::jpeg_encoder::process_scanline(const void*)" -> "void jpge::jpeg_encoder::load_mcu(const void*)" [style=solid];
"void jpge::jpeg_encoder::emit_sos()" -> "void jpge::jpeg_encoder::emit_word(jpge::uint)" [style=solid];
"void jpge::jpeg_encoder::emit_sos()" -> "void jpge::jpeg_encoder::emit_byte(jpge::uint8)" [style=solid];
"void jpge::jpeg_encoder::emit_sos()" -> "void jpge::jpeg_encoder::emit_marker(int)" [style=solid];
"bool jpge::compress_image_to_jpeg_file_in_memory(void*, int&, int, int, int, const jpge::uint8*, const jpge::params&)" -> "bool jpge::jpeg_encoder::init(jpge::output_stream*, int, int, int, const jpge::params&)" [style=solid];
"bool jpge::compress_image_to_jpeg_file_in_memory(void*, int&, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::uint jpge::memory_stream::get_size() const" [style=solid];
"bool jpge::compress_image_to_jpeg_file_in_memory(void*, int&, int, int, int, const jpge::uint8*, const jpge::params&)" -> "void jpge::jpeg_encoder::deinit()" [style=solid];
"bool jpge::compress_image_to_jpeg_file_in_memory(void*, int&, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::jpeg_encoder::~jpeg_encoder()" [style=solid];
"bool jpge::compress_image_to_jpeg_file_in_memory(void*, int&, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::jpeg_encoder::jpeg_encoder()" [style=solid];
"bool jpge::compress_image_to_jpeg_file_in_memory(void*, int&, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::memory_stream::memory_stream(void*, jpge::uint)" [style=solid];
"bool jpge::compress_image_to_jpeg_file_in_memory(void*, int&, int, int, int, const jpge::uint8*, const jpge::params&)" -> "jpge::uint jpge::jpeg_encoder::get_total_passes() const" [style=solid];
"bool jpge::compress_image_to_jpeg_file_in_memory(void*, int&, int, int, int, const jpge::uint8*, const jpge::params&)" -> "bool jpge::jpeg_encoder::process_scanline(const void*)" [style=solid];
"void jpge::jpeg_encoder::code_coefficients_pass_two(int)" -> "void jpge::jpeg_encoder::put_bits(jpge::uint, jpge::uint)" [style=solid];
"void jpge::jpeg_encoder::put_bits(jpge::uint, jpge::uint)" -> "void jpge::jpeg_encoder::flush_output_buffer()" [style=solid];
"void jpge::jpeg_encoder::emit_markers()" -> "void jpge::jpeg_encoder::emit_dqt()" [style=solid];
"void jpge::jpeg_encoder::emit_markers()" -> "void jpge::jpeg_encoder::emit_dhts()" [style=solid];
"void jpge::jpeg_encoder::emit_markers()" -> "void jpge::jpeg_encoder::emit_marker(int)" [style=solid];
"void jpge::jpeg_encoder::emit_markers()" -> "void jpge::jpeg_encoder::emit_sof()" [style=solid];
"void jpge::jpeg_encoder::emit_markers()" -> "void jpge::jpeg_encoder::emit_jfif_app0()" [style=solid];
"void jpge::jpeg_encoder::emit_markers()" -> "void jpge::jpeg_encoder::emit_sos()" [style=solid];
"void jpge::jpeg_encoder::load_mcu(const void*)" -> "void jpge::jpeg_encoder::process_mcu_row()" [style=solid];
"void jpge::jpeg_encoder::load_mcu(const void*)" -> "void jpge::RGB_to_YCC(jpge::uint8*, const jpge::uint8*, int)" [style=solid];
"void jpge::jpeg_encoder::load_mcu(const void*)" -> "void jpge::RGBA_to_Y(jpge::uint8*, const jpge::uint8*, int)" [style=solid];
"void jpge::jpeg_encoder::load_mcu(const void*)" -> "void jpge::Y_to_YCC(jpge::uint8*, const jpge::uint8*, int)" [style=solid];
"void jpge::jpeg_encoder::load_mcu(const void*)" -> "void jpge::RGBA_to_YCC(jpge::uint8*, const jpge::uint8*, int)" [style=solid];
"void jpge::jpeg_encoder::load_mcu(const void*)" -> "void jpge::RGB_to_Y(jpge::uint8*, const jpge::uint8*, int)" [style=solid];
"void jpge::jpeg_encoder::emit_dqt()" -> "void jpge::jpeg_encoder::emit_word(jpge::uint)" [style=solid];
"void jpge::jpeg_encoder::emit_dqt()" -> "void jpge::jpeg_encoder::emit_byte(jpge::uint8)" [style=solid];
"void jpge::jpeg_encoder::emit_dqt()" -> "void jpge::jpeg_encoder::emit_marker(int)" [style=solid];
"virtual jpge::cfile_stream::~cfile_stream()" -> "bool jpge::cfile_stream::close()" [style=solid];
"jpge::cfile_stream::cfile_stream()" -> "jpge::output_stream::output_stream()" [style=solid];
"jpge::jpeg_encoder::~jpeg_encoder()" -> "void jpge::jpeg_encoder::deinit()" [style=solid];
"void jpge::jpeg_encoder::emit_sof()" -> "void jpge::jpeg_encoder::emit_word(jpge::uint)" [style=solid];
"void jpge::jpeg_encoder::emit_sof()" -> "void jpge::jpeg_encoder::emit_byte(jpge::uint8)" [style=solid];
"void jpge::jpeg_encoder::emit_sof()" -> "void jpge::jpeg_encoder::emit_marker(int)" [style=solid];
"void jpge::jpeg_encoder::process_mcu_row()" -> "void jpge::jpeg_encoder::load_block_16_8(int, int)" [style=solid];
"void jpge::jpeg_encoder::process_mcu_row()" -> "void jpge::jpeg_encoder::load_block_8_8_grey(int)" [style=solid];
"void jpge::jpeg_encoder::process_mcu_row()" -> "void jpge::jpeg_encoder::load_block_8_8(int, int, int)" [style=solid];
"void jpge::jpeg_encoder::process_mcu_row()" -> "void jpge::jpeg_encoder::load_block_16_8_8(int, int)" [style=solid];
"void jpge::jpeg_encoder::process_mcu_row()" -> "void jpge::jpeg_encoder::code_block(int)" [style=solid];
"void jpge::jpeg_encoder::emit_dhts()" -> "void jpge::jpeg_encoder::emit_dht(jpge::uint8*, jpge::uint8*, int, bool)" [style=solid];
"void jpge::jpeg_encoder::emit_dht(jpge::uint8*, jpge::uint8*, int, bool)" -> "void jpge::jpeg_encoder::emit_word(jpge::uint)" [style=solid];
"void jpge::jpeg_encoder::emit_dht(jpge::uint8*, jpge::uint8*, int, bool)" -> "void jpge::jpeg_encoder::emit_byte(jpge::uint8)" [style=solid];
"void jpge::jpeg_encoder::emit_dht(jpge::uint8*, jpge::uint8*, int, bool)" -> "void jpge::jpeg_encoder::emit_marker(int)" [style=solid];
"void jpge::jpeg_encoder::emit_jfif_app0()" -> "void jpge::jpeg_encoder::emit_word(jpge::uint)" [style=solid];
"void jpge::jpeg_encoder::emit_jfif_app0()" -> "void jpge::jpeg_encoder::emit_byte(jpge::uint8)" [style=solid];
"void jpge::jpeg_encoder::emit_jfif_app0()" -> "void jpge::jpeg_encoder::emit_marker(int)" [style=solid];
"virtual jpge::memory_stream::~memory_stream()";
"virtual bool jpge::memory_stream::put_buf(const void*, int)";
"virtual jpge::output_stream::~output_stream()";
"virtual bool jpge::cfile_stream::put_buf(const void*, int)";
"virtual jpge::memory_stream::~memory_stream()";
"virtual jpge::output_stream::~output_stream()";
}
